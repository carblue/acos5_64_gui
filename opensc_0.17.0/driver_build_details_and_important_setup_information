file: driver_build_details_and_important_setup_information

dub build --arch=x86_64 --build=release --compiler=dmd

{
	"name" : "acos5_64",
	"description" : "ACS ACOS5-64/CryptoMate64/Nano driver/SM/PKCS#15 external module for the OpenSC framework",
	"license": "LGPL-2.1",
	"copyright": "Copyright © 2016-2018, Carsten Blüggel",
	"authors": ["Carsten Blüggel"],
	"homepage": "https://github.com/carblue/acos5_64   recent source code used for building, rather than the outdated (April 2017) from package acos5_64",
	"dependencies" : {
		"~>0.18.0-beta.2"
	},
	"subConfigurations": {
		"opensc": "deimos"
	},
	"targetName": "acos5_64",
	"targetType": "dynamicLibrary",
	"targetPath": "lib",
	"excludedSourceFiles": [],
	"buildRequirements" : ["disallowDeprecations"],
	"lflags-posix" : ["--no-undefined", "--as-needed", "--version-script=lib/libacos5_64.ver"],
	"configurations": [
		{
			"name": "library",
			"versions": ["SESSIONKEYSIZE24", "ENABLE_ACOS5_64_UI", "NOLOG"],
			"dflags-posix-dmd": ["-dip1000"]
		}
	]
}


$ ldd libacos5_64.so
        linux-vdso.so.1 (0x00007ffd6555b000)
        libcrypto.so.1.1 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007fa6746bb000)
        libopensc.so.6 => /usr/lib/libopensc.so.6 (0x00007fa6742e7000)
        libphobos2.so.0.80 => /usr/lib/x86_64-linux-gnu/libphobos2.so.0.80 (0x00007fa673b21000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa673902000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fa6736ea000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa6732f9000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fa674d7d000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa6730f5000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fa672ed8000)
        libgio-2.0.so.0 => /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0 (0x00007fa672b3a000)
        libgobject-2.0.so.0 => /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 (0x00007fa6728e6000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa672548000)
        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa672340000)
        libgmodule-2.0.so.0 => /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 (0x00007fa67213c000)
        libglib-2.0.so.0 => /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007fa671e26000)
        libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007fa671bfe000)
        libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007fa6719e3000)
        libmount.so.1 => /lib/x86_64-linux-gnu/libmount.so.1 (0x00007fa67178f000)
        libffi.so.6 => /usr/lib/x86_64-linux-gnu/libffi.so.6 (0x00007fa671587000)
        libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fa671315000)
        libblkid.so.1 => /lib/x86_64-linux-gnu/libblkid.so.1 (0x00007fa6710c8000)
        libuuid.so.1 => /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007fa670ec1000)

The system dependencies are the latest available on/for Ubuntu 18.04 LTS (Bionic Beaver), as of 2018-05-16

$ uname -a
Linux tux 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
-------------------------------------------------------------------------------------------------------------

The Linux environment got updated to Ubuntu 18.04 LTS (Bionic Beaver) for the OpenSC version 0.18.0 install !

A preview of a typical manual install of OpenSC version 0.18.0:

OpenSC has been configured with the following options:


Version:                 0.18.0
Version fix:             0
Version revision:        0
Git revision:            No Git revision info available

Copyright:               OpenSC Project
Company:                 OpenSC Project
Company URL:             https://github.com/OpenSC
Comments:                Provided under the terms of the GNU Lesser General Public License (LGPLv2.1+).
Product name:            OpenSC smartcard framework
Product updates:         https://github.com/OpenSC/OpenSC/releases
Product URL:             https://github.com/OpenSC/OpenSC

User binaries:           /usr/bin
Configuration files:     /etc/opensc
XSL stylesheets:         /usr/share/xml/docbook/stylesheet/nwalsh

man support:             yes
doc support:             no
thread locking support:  yes
zlib support:            yes
readline support:        yes
OpenSSL support:         yes
PC/SC support:           yes
CryptoTokenKit support:  no
OpenCT support:          no
CT-API support:          no
minidriver support:      no
SM support:              yes
SM default module:       libsmm-local.so
DNIe UI support:         no
Notification support:    yes
Debug file:              /tmp/opensc-debug.log

PC/SC default provider:  libpcsclite.so.1
PKCS11 default provider: opensc-pkcs11.so

Host:                    x86_64-pc-linux-gnu
Compiler:                gcc
Preprocessor flags:
Compiler flags:          -g -O2 -Wall -Wextra -Wno-unused-parameter -Werror
Linker flags:
Libraries:               -ldl

READLINE_CFLAGS:
READLINE_LIBS:           -lreadline
ZLIB_CFLAGS:
ZLIB_LIBS:               -lz
OPENSSL_CFLAGS:
OPENSSL_LIBS:            -lcrypto
OPENPACE_CFLAGS:
OPENPACE_LIBS:
OPENCT_CFLAGS:
OPENCT_LIBS:
PCSC_CFLAGS:             -pthread -I/usr/include/PCSC
CRYPTOTOKENKIT_CFLAGS:
GIO2_CFLAGS:             -pthread -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include
GIO2_LIBS:               -lgio-2.0 -lgobject-2.0 -lglib-2.0

-------------------------------------------------------------------------------------------------------------



setup information
=================

Basic requirements are the DUB package manager and the DMD D compiler from  https://dlang.org/download.html.
(Alternatively LDC 1.9.0).
Many (if not all) compiler downlaods available from there are bundled including DUB.

IUP
===
Starting point for the binary downloads is e.g.  http://webserver2.tecgraf.puc-rio.br/iup/en/download.html
This will point to some  sourceforge.net site. The kernel-matching-one of iup-???_64_lib.tar.gz in folder
Linux Libraries is what You want (for kernel 4.15, the files for kernel 4.4 do work as well).
There is a suitable script file 'install' inside.
The installation of IUP and CD is required, IM is optional.
The precompiled binaries downloaded/installed depend on a bunch of other installations
(assumed regularly available on Your system already; requirements as in IUP/CD documentaion).
Those prerequisites are mentioned e.g. for IUP at  http://webserver2.tecgraf.puc-rio.br/iup/en/guide.html#start

In order to test, whether all dependencies of IUP and CD are in place, fetch my iup D binding manually:
dub fetch iup

cd into the downloaded package directory where the folder 'examples' resides and run:
cd examples/C && chmod +x tree.d && ./tree.d

If that doesn't launch a window showing a simple tree structure, then something is missing in IUP/CD installation.
The dynamic layout of graphical elements like text boxes size depends on the GTK-Font size (the GUI design was based on Noto Sans 10).
Don't select greater fonts as then the application window would exceed the screen size.

OpenSC
======
It's recommended to read at least the README.md of dependency package/D-binding 'opensc' because of the tight dependency
on the specific opensc binary on Your system that will be used !!
Required is libopensc.so which will point to
libopensc.so.5 in opensc version 0.17.0
libopensc.so.6 in opensc version 0.18.0
Depending whether a distribution installs the symlink libopensc.so or not, either create the symlink if not there or
change dub.json to "libs-posix": [":libopensc.so.5"] or "libs-posix": [":libopensc.so.6"]

Also https://github.com/carblue/opensc/blob/master/info/options is a recommended read !

IT'S ABSOLUTELY REQUIRED, THAT THE D BINDING (opensc packege's version identifiers) MATCHES EXACTLY HOW THE libopensc.so
BINARY WAS BUILT !!!

opensc is available in many distributions, though maybe not versions 0.17.0 or 0.18.0
If You need to build that, it's easy following https://github.com/OpenSC/OpenSC/wiki/Compiling-and-Installing-on-Unix-flavors.
Do what's described as 'Typical Installation' but optionally/recommended replace the install step by: sudo checkinstall
Requirements are a libopensc.so and opensc-pkcs11.so installed/available afterwards !
I assume, You now have an opensc version 0.18.0 binary installation (otherwise a 0.17.0 binary, which requires ommitting
OPENSC_VERSION_LATEST from the bindings dub.json). Following the 'Typical Installation' will #define
ENABLE_SM, ENABLE_OPENSSL  and NOT #define SIMCLIST_WITH_THREADS, SIMCLIST_DUMPRESTORE in the binary build.

The driver/SM libacos5_64.so binaries available here depend on a specific version of opensc && compiler/phobos && openssl !

Select the one that matches and copy that to some location as explained later with opensc.conf.

Apply the accompanied etc_opensc_opensc_conf.patch on the original (what get's initially installed by OpenSC) opensc.conf
for Linux as of the respective version,
assumingly located in /etc/opensc/opensc.conf, by:
patch -b /etc/opensc/opensc.conf etc_opensc_opensc_conf.patch

That does the essential configuration, such that the driver 'acos5_64' implemented by libacos5_64.so will be loaded as an external
driver and an external SM module (same binary used for driver and SecureMessaging module).
The problem with the false positive recognition of ATR of Card/CryptoMate64 in acos5 internal driver is dealt with by excluding
all internal drivers except acos5_64, default:
There may be better ways to workaround that problem.

Review the settings done by etc_opensc_opensc_conf.patch, escpecially 3 points require special attention, partially manual editing:
1. Where the binary libacos5_64.so is located: The easiest (least to specify) way, but not required, is to place it in a directory
   that is part of the system's library search path, e.g. /usr/local/lib/libacos5_64.so
   Don't forget a  sudo ldconfig  then.
2. If You want/Your card/token uses Secure Messaging, then 2 correct keyset_* must exist:
   keyset_..._02_enc (which corresponds to record #2 with key reference 0x82 on card) and keyset_..._02_mac  (which corresponds to
   record #1 with key reference 0x81 on card), all are 24 byte keys according to SESSIONKEYSIZE24 set.
   keyset* and corresponding key on card must be the same, i.e. You are using 2 recommendedly different, 24 byte keys, that both
   opensc.conf and the card know about:
   These keys are used, one for Internal Authentication, the other for External Authentication, which are initial steps in
   establishing a 'secure channel' for Secure Messaging.
   OpenSC software (namely the acos5_64 SM module) will evaluate the entries for keyset in opensc.conf and check them for equality
   against the keys on card.

   Put Key operations aren't yet provided by acos5_64_gui, but nevertheless, You have to lookup the "Symmetric Key Record Format"
   in the ACOS5-64 reference manual anyway: There are decisions to make about Retry(Error) / Usage Counter as well.
Here are example commands (within the quotes) to use (e.g. from gscriptor, but better eliminate spaces used here for readability):
hexString!"00 A4 00 00 02  4100"
hexString!"00 A4 00 00 02  4102"
hexString!"00 DC 01 04 25  81 01 FF   14 F1E0D0C1B0A18908 07164504130201F1 89FEB3C837451694 000000000000000000" // Kt; no Retry(Error) Counter for key ! External Auth.
hexString!"00 DC 02 04 25  82 02 FFFF 14 F101021304851607 0849A1B0C1D0E0F1 4589B316FE9437C8 0000000000000000"   // Kc; no        Usage Counter for key ! Internal Auth. think about using SO_PIN or just update record with new key?
hexString!"00 44 00 00 02  4102"

3. The driver is compiled with ENABLE_ACOS5_64_UI set, which means, the driver basically is prepared to launch a pinentry program
   and respect Your decision taken:
   The lauch will take place when a RSA private key shall be used for operation 'Sign' or 'Decrypt'. There is actually no pin asked
   for here; it's all about Your consent to use the private key now or reject that.
   popup_user_consent_app =;  must be edited to actually enable that feature, and of course that program must be callable;
