PKCS15 {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
         pkcs-15(15) modules(1) pkcs-15(1)}

DEFINITIONS IMPLICIT TAGS ::=

BEGIN

-- The author of this file: Customization to ACOS5, OpenSC v0.19.0 and libtasn1 was applied!
-- My understanding of ASN.1 is still incomplete, thus there may be error(s),
-- especially ref. EXPLICIT missing or applied inappropriately!
--

ECPoint ::= OCTET STRING -- see RFC 5480 for syntax and restrictions

-- from Module InformationFramework (X.501:10/2012)

-- naming data types --

Name ::= CHOICE { -- only one possibility for now
    rdnSequence  RDNSequence
}

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

DistinguishedName ::= RDNSequence

RelativeDistinguishedName ::= SET SIZE (1 .. MAX) OF AttributeTypeAndValue

-- Directory string type --

DirectoryString ::= CHOICE {
      teletexString             TeletexString (SIZE (1..MAX)),
      printableString           PrintableString (SIZE (1..MAX)),
      universalString           UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1..MAX)),
      bmpString               BMPString (SIZE(1..MAX))
}

GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

GeneralName ::= CHOICE {
     otherName                       [0]     AnotherName,
     rfc822Name                      [1]     IA5String,
     dNSName                         [2]     IA5String,
--     x400Address                     [3]     ORAddress,
     directoryName                   [4]     Name,
     ediPartyName                    [5]     EDIPartyName,
     uniformResourceIdentifier       [6]     IA5String,
     iPAddress                       [7]     OCTET STRING,
     registeredID                    [8]     OBJECT IDENTIFIER
}

-- AnotherName replaces OTHER-NAME ::= TYPE-IDENTIFIER, as
-- TYPE-IDENTIFIER is not supported in the '88 ASN.1 syntax

AnotherName ::= SEQUENCE {
     type-id    OBJECT IDENTIFIER,
     value      [0] EXPLICIT ANY DEFINED BY type-id }

EDIPartyName ::= SEQUENCE {
     nameAssigner            [0]     DirectoryString OPTIONAL,
     partyName               [1]     DirectoryString
}

AttributeType           ::=   OBJECT IDENTIFIER

AttributeValue          ::=   ANY

AttributeTypeAndValue ::= SEQUENCE {
    type    AttributeType,
    value   AttributeValue
}

CertificateSerialNumber  ::=  INTEGER


-- from pkcs-15v1_1.asn

-- Constants

pkcs15-ub-identifier          INTEGER ::= 255
pkcs15-ub-reference           INTEGER ::= 255
pkcs15-ub-index               INTEGER ::= 65535
pkcs15-ub-label               INTEGER ::= 255
pkcs15-lb-minPinLength        INTEGER ::= 4
pkcs15-ub-minPinLength        INTEGER ::= 8
pkcs15-ub-storedPinLength     INTEGER ::= 64
pkcs15-ub-recordLength        INTEGER ::= 16383
pkcs15-ub-userConsent         INTEGER ::= 15
pkcs15-ub-securityConditions  INTEGER ::= 255
pkcs15-ub-seInfo              INTEGER ::= 255

-- Object Identifiers

pkcs15 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
                               rsadsi(113549) pkcs(1) pkcs-15(15)}
pkcs15-mo OBJECT IDENTIFIER ::= {pkcs15 1} -- Modules branch
pkcs15-at OBJECT IDENTIFIER ::= {pkcs15 2} -- Attribute branch
pkcs15-ct OBJECT IDENTIFIER ::= {pkcs15 3} -- Content type branch

-- Content Types

pkcs15-ct-PKCS15Token OBJECT IDENTIFIER ::= {pkcs15-ct 1}

-- Basic types

Identifier ::= OCTET STRING (SIZE (0..pkcs15-ub-identifier))

Reference ::= INTEGER (0..pkcs15-ub-reference)

Label ::= UTF8String (SIZE(0..pkcs15-ub-label))

--KEY-IDENTIFIER ::= CLASS {
--    &id  INTEGER UNIQUE,
--    &Value
--}  WITH SYNTAX {
--    SYNTAX &Value IDENTIFIED BY &id
--}

CredentialIdentifier ::= SEQUENCE { --  {KEY-IDENTIFIER : IdentifierSet}
    idType  INTEGER, --  UNIQUE KEY-IDENTIFIER.&id ({IdentifierSet}),
    idValue ANY DEFINED BY idType -- KEY-IDENTIFIER.&Value ({IdentifierSet}{@idType})
}
--AlgorithmIdentifier  ::=  SEQUENCE  {
--     algorithm               OBJECT IDENTIFIER,
--     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                                -- contains a value of the type
                                -- registered for use with the
                                -- algorithm object identifier value


--

ReferencedValue ::= CHOICE { -- ReferencedValue {Type} ::= CHOICE {
    path	Path
--    url		URL
} -- (CONSTRAINED BY { 'path' or 'url' shall point to an object of type Type})

Path ::= SEQUENCE {
    path 	OCTET STRING,
    index  	INTEGER (0..pkcs15-ub-index) OPTIONAL,
    length 	[0] INTEGER (0..pkcs15-ub-index) OPTIONAL
} -- ( WITH COMPONENTS {..., index PRESENT, length PRESENT}|
  --   WITH COMPONENTS {..., index ABSENT, length ABSENT})

ObjectValue ::= CHOICE { -- ObjectValue { Type } ::= CHOICE {
    indirect 	        ReferencedValue -- {Type},
--    direct 	        [0] EXPLICIT  Type,
--    indirect-protected	[1] ReferencedValue {EnvelopedData {Type}},
--    direct-protected	[2] EnvelopedData {Type}
} -- (CONSTRAINED BY { if indirection is being used, then it is
    -- expected that the reference points either to a (possibly
    -- enveloped) object of type  Type  or (key case) to a card-
    -- specific key file })

ObjectValueRSAPublicKeyChoice ::= CHOICE { -- ObjectValue { RSAPublicKeyChoice } ::= CHOICE {
    indirect            ReferencedValue, -- {Type},
    direct              [0] EXPLICIT RSAPublicKeyChoice -- Type,
--    indirect-protected	[1] ReferencedValue {EnvelopedData {Type}},
--    direct-protected	[2] EnvelopedData {Type}
} -- (CONSTRAINED BY { if indirection is being used, then it is

ObjectValueECPublicKeyChoice ::= CHOICE { -- ObjectValue { ECPublicKeyChoice } ::= CHOICE {
    indirect            ReferencedValue, -- {Type},
    direct              [0] EXPLICIT ECPublicKeyChoice -- Type,
--    indirect-protected	[1] ReferencedValue {EnvelopedData {Type}},
--    direct-protected	[2] EnvelopedData {Type}
} -- (CONSTRAINED BY { if indirection is being used, then it is


PathOrObjects ::= CHOICE { -- {ObjectType}
    path  	Path
--    objects  	[0] SEQUENCE OF ObjectType,
--    ...,
--    indirect-protected [1] ReferencedValue {EnvelopedData {SEQUENCE OF ObjectType}},
--    direct-protected [2] EnvelopedData {SEQUENCE OF ObjectType}
}

CommonObjectAttributes ::= SEQUENCE {
    label		Label OPTIONAL,
    flags  		CommonObjectFlags OPTIONAL,
    authId 		Identifier OPTIONAL,
--    ...,
    userConsent 		INTEGER (1..pkcs15-ub-userConsent) OPTIONAL
--    accessControlRules	SEQUENCE SIZE (1..MAX) OF AccessControlRule OPTIONAL
} --(CONSTRAINED BY { authId should be present in the IC card case if
    -- flags.private is set. It must equal an authID in one AuthRecord
    -- in the AODF })

CommonObjectFlags ::= BIT STRING {
    private		(0),
    modifiable 	(1)
}

--AccessControlRule ::= SEQUENCE {
--    accessMode			AccessMode,
--    securityCondition 	SecurityCondition       seemingly tasn1 can't process that
--    ...  For future extensions
--}

--AccessMode ::= BIT STRING {
--    read	(0),
--    update	(1),
--    execute	(2)
--}

--SecurityCondition ::= CHOICE {
--    authId	Identifier,
--    not    	[0] SecurityCondition,
--    and    	[1] SEQUENCE SIZE (2..pkcs15-ub-securityConditions)
--                OF SecurityCondition,
--    or     	[2] SEQUENCE SIZE (2..pkcs15-ub-securityConditions)
--                OF SecurityCondition,
--    ...  For future extensions
--}

CommonKeyAttributes ::= SEQUENCE {
    iD 		 Identifier,
    usage 	 KeyUsageFlags,
    native	 BOOLEAN DEFAULT TRUE,
    accessFlags	 KeyAccessFlags OPTIONAL,
    keyReference Reference OPTIONAL,
    startDate 	 GeneralizedTime OPTIONAL,
    endDate  	 [0] GeneralizedTime OPTIONAL,
    algReference [1] SEQUENCE OF Reference OPTIONAL
--    ...  For future extensions
}

KeyUsageFlags ::= BIT STRING {
    encrypt 			(0),
    decrypt 			(1),
    sign 				(2),
    signRecover 		(3),
    wrap 				(4),
    unwrap 				(5),
    verify 				(6),
    verifyRecover  		(7),
    derive 				(8),
    nonRepudiation		(9)
}

KeyAccessFlags ::= BIT STRING {
    sensitive  			(0),
    extractable 		(1),
    alwaysSensitive 	(2),
    neverExtractable	(3),
    local				(4)
}

CommonPrivateKeyAttributes ::= SEQUENCE {
    subjectName  Name OPTIONAL,
    keyIdentifiers 	[0] SEQUENCE OF CredentialIdentifier OPTIONAL -- {{KeyIdentifiers}}
--    ...  For future extensions
}

CommonPublicKeyAttributes ::= SEQUENCE {
    subjectName  Name OPTIONAL
--    ...,
--    trustedUsage [0] Usage OPTIONAL
}

-- some more left out

CommonSecretKeyAttributes ::= SEQUENCE {
    keyLen	INTEGER OPTIONAL -- keylength (in bits)
--    ...  For future extensions
}

CommonCertificateAttributes ::= SEQUENCE {
    iD 		Identifier,
    authority	BOOLEAN DEFAULT FALSE,
    identifier 	CredentialIdentifier OPTIONAL, -- {{KeyIdentifiers}}
    certHash	[0] OOBCertHash OPTIONAL,
--    ...,
    trustedUsage    [1] Usage OPTIONAL,
    identifiers     [2] SEQUENCE OF CredentialIdentifier OPTIONAL, --{{KeyIdentifiers}}
    implicitTrust   [3] BOOLEAN DEFAULT FALSE
}

 OOBCertHash ::= SEQUENCE {
     hashAlg     [0] AlgorithmIdentifier OPTIONAL, --{DIGEST-ALGORITHM, {...}}
     certId      [1] CertId                  OPTIONAL,
     hashVal         BIT STRING
     -- hashVal is calculated over the DER encoding of the
     -- self-signed certificate with the identifier certID.
 }

AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm               OBJECT IDENTIFIER,
     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                                -- contains a value of the type
                                -- registered for use with the
                                -- algorithm object identifier value

-- Algorithm OIDs and parameter structures

pkcs-1 OBJECT IDENTIFIER ::= {
     iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }

rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1 }

--
-- When the following OIDs are used in an AlgorithmIdentifier the parameters
-- MUST be present and MUST be NULL.
--
md2WithRSAEncryption         OBJECT IDENTIFIER ::= { pkcs-1 2 }
md5WithRSAEncryption         OBJECT IDENTIFIER ::= { pkcs-1 4 }
sha1WithRSAEncryption        OBJECT IDENTIFIER ::= { pkcs-1 5 }
sha224WithRSAEncryption      OBJECT IDENTIFIER ::= { pkcs-1 14 }
sha256WithRSAEncryption      OBJECT IDENTIFIER ::= { pkcs-1 11 }
sha384WithRSAEncryption      OBJECT IDENTIFIER ::= { pkcs-1 12 }
sha512WithRSAEncryption      OBJECT IDENTIFIER ::= { pkcs-1 13 }
sha512-224WithRSAEncryption  OBJECT IDENTIFIER ::= { pkcs-1 15 }
sha512-256WithRSAEncryption  OBJECT IDENTIFIER ::= { pkcs-1 16 }

CertId ::= SEQUENCE {
    issuer           GeneralName,
    serialNumber     INTEGER
}

Usage ::= SEQUENCE {
    keyUsage	KeyUsage OPTIONAL,
    extKeyUsage	SEQUENCE SIZE (1..MAX) OF OBJECT IDENTIFIER OPTIONAL
    } -- (WITH COMPONENTS {..., keyUsage PRESENT} |
      --  WITH COMPONENTS {..., extKeyUsage PRESENT})

KeyUsage ::= BIT STRING {
     digitalSignature        (0),
     nonRepudiation          (1),
     keyEncipherment         (2),
     dataEncipherment        (3),
     keyAgreement            (4),
     keyCertSign             (5),
     cRLSign                 (6),
     encipherOnly            (7),
     decipherOnly            (8)
}

CommonDataObjectAttributes ::= SEQUENCE {
    applicationName	Label OPTIONAL,
    applicationOID 	OBJECT IDENTIFIER OPTIONAL
--    iD				Identifier OPTIONAL,
--    ...  For future extensions
    } -- (WITH COMPONENTS {..., applicationName PRESENT}|
      --  WITH COMPONENTS {..., applicationOID PRESENT})

CommonAuthenticationObjectAttributes ::= SEQUENCE {
    authId Identifier
--    authId          Identifier OPTIONAL, this and the following are from ISO 7816-15:2002
--    authReference   Reference OPTIONAL,
--    seIdentifier    [0] Reference OPTIONAL,
--    ...  For future extensions
}

--PKCS15Object {ClassAttributes, SubClassAttributes, TypeAttributes}
--    ::= SEQUENCE {
--    commonObjectAttributes	CommonObjectAttributes,
--    classAttributes		ClassAttributes,
--    subClassAttributes 		[0] SubClassAttributes OPTIONAL,
--    typeAttributes		[1] TypeAttributes
--}

PrivateRSAKeyAttributes ::= SEQUENCE {
    value 			ObjectValue, -- {RSAPrivateKeyObject},
    modulusLength 	INTEGER -- modulus length in bits, e.g. 1024
--    keyInfo  		KeyInfo {NULL, PublicKeyOperations} OPTIONAL,
--    ...  For future extensions
}

PublicRSAKeyAttributes ::= SEQUENCE {
    value			ObjectValueRSAPublicKeyChoice, -- {RSAPublicKeyChoice}
    modulusLength 	INTEGER -- modulus length in bits, e.g. 1024
--    keyInfo		KeyInfo {NULL, PublicKeyOperations} OPTIONAL,
--    ...  For future extensions
}

RSAPublicKeyChoice ::= CHOICE { -- sc_card_operations.read_public_key must deliver this
    raw	 RSAPublicKey
--    spki [1] SubjectPublicKeyInfo, See X.509. Must contain a public RSA key
--    ...
}

RSAPublicKey ::= SEQUENCE {
    modulus           INTEGER,  -- n
    publicExponent    INTEGER   -- e
}

PrivateECKeyAttributes ::= SEQUENCE {
    value  	ObjectValue -- {ECPrivateKey},
--    keyInfo 	KeyInfo {Parameters, PublicKeyOperations} OPTIONAL,
--    ...  For future extensions
}

ECPrivateKey ::= INTEGER

PublicECKeyAttributes ::= SEQUENCE {
    value  	ObjectValueECPublicKeyChoice -- {ECPublicKeyChoice},
--    keyInfo 	KeyInfo {Parameters, PublicKeyOperations} OPTIONAL,
--    ...  For future extensions
}

ECPublicKeyChoice ::= CHOICE {
    raw	 ECPoint,
    spki SubjectPublicKeyInfo -- See X.509. Must contain a public EC key
--    ...
}

GenericSecretKeyAttributes ::= SEQUENCE {
    value	ObjectValue -- { OCTET STRING },
--    ...  For future extensions
}

X509CertificateAttributes ::= SEQUENCE {
    value		ObjectValue, -- { Certificate },
    subject  		Name OPTIONAL,
    issuer 		[0] Name OPTIONAL,
    serialNumber 	CertificateSerialNumber OPTIONAL
--    ...  For future extensions
}

Opaque ::= ObjectValue -- {PKCS15-OPAQUE.&Type}

PinAttributes ::= SEQUENCE {
    pinFlags  	  PinFlags,
    pinType  	  PinType,
    minLength 	  INTEGER (pkcs15-lb-minPinLength..pkcs15-ub-minPinLength),
    storedLength  INTEGER (0..pkcs15-ub-storedPinLength),
    maxLength 	  INTEGER OPTIONAL,
    pinReference  [0] Reference DEFAULT 0,
    padChar  	  OCTET STRING (SIZE(1)) OPTIONAL,
    lastPinChange GeneralizedTime OPTIONAL,
    path 	  Path OPTIONAL
--    ...  For future extensions
}

PinFlags ::= BIT STRING {
    case-sensitive				(0),
    local 						(1),
    change-disabled 			(2),
    unblock-disabled 			(3),
    initialized  				(4),
    needs-padding 				(5),
    unblockingPin 				(6),
    soPin 						(7),
    disable-allowed 			(8),
    integrity-protected			(9),
    confidentiality-protected	(10),
    exchangeRefData				(11)
} -- (CONSTRAINED BY {  'unblockingPin' and 'soPIN' cannot both be set  })

PinType ::= ENUMERATED { bcd(0), ascii-numeric(1), utf8(2), half-nibble-bcd(3), iso9564-1(4) }

BiometricAttributes ::= SEQUENCE {
    bioFlags		BiometricFlags,
    templateId		OBJECT IDENTIFIER,
    bioType			BiometricType,
    bioReference	Reference DEFAULT 0,
    lastChange		GeneralizedTime OPTIONAL,
    path			Path OPTIONAL
--    ...  For future extensions
}

BiometricFlags ::= BIT STRING {
    local				(1),
    change-disabled		(2),
    unblock-disabled	(3),
    initialized			(4),
    disable-allowed		(8),
    integrity-protected	(9),
    confidentiality-protected	(10)
} -- Note: bits 0, 5, 6, and 7 are reserved for future use

BiometricType ::= CHOICE {
    fingerPrint		FingerPrint,
    irisScan		[0] IrisScan
    -- Possible extensions:
    -- voiceScan	VoiceScan,
    -- faceScan		FaceScan,
    -- retinaScan	Retinascan,
    -- handGeometry	HandGeometry,
    -- writeDynamics	WriteDynamics,
    -- keyStrokeDynamicsKeyStrokeDynamics,
    -- lipDynamics	LipDynamics,
--    ...  For future extensions
}

FingerPrint ::= SEQUENCE {
    hand	ENUMERATED {left(0), right(1)},
    finger	ENUMERATED {thumb(0), pointerFinger(1), middleFinger(2),
                    ringFinger(3), littleFinger(4)}
--    ...  For future extensions
}

IrisScan ::= SEQUENCE {
    eye	ENUMERATED {left(0), right(1)}
--    ...  For future extensions
}

ExternalAuthObjectAttributes ::= CHOICE {
    authKeyAttributes   AuthKeyAttributes,
    certBasedAttributes [0] CertBasedAuthenticationAttributes
--    ...  For future extensions
}

AuthKeyAttributes ::= SEQUENCE {
    derivedKey  BOOLEAN DEFAULT TRUE,
    authKeyId   Identifier
--    ...  For future extensions
}

CertBasedAuthenticationAttributes ::= SEQUENCE {
    cha     OCTET STRING
--    ...  For future extensions
}

PrivateKeyObjectRSA ::= SEQUENCE { -- new name 'PrivateKeyObjectRSA' created for PKCS15Object {CommonKeyAttributes, CommonPrivateKeyAttributes, PrivateRSAKeyAttributes}
    commonObjectAttributes	CommonObjectAttributes,
    commonKeyAttributes		CommonKeyAttributes,
    commonPrivateKeyAttributes 	[0] EXPLICIT CommonPrivateKeyAttributes OPTIONAL,
    privateRSAKeyAttributes		[1] EXPLICIT PrivateRSAKeyAttributes
}

PublicKeyObjectRSA ::= SEQUENCE { -- new name 'PublicKeyObjectRSA' created for PKCS15Object {CommonKeyAttributes, CommonPublicKeyAttributes, PublicRSAKeyAttributes}
    commonObjectAttributes	CommonObjectAttributes,
    commonKeyAttributes		CommonKeyAttributes,
    commonPublicKeyAttributes 	[0] EXPLICIT CommonPublicKeyAttributes OPTIONAL,
    publicRSAKeyAttributes		[1] EXPLICIT PublicRSAKeyAttributes
}

PrivateKeyObjectEC ::= SEQUENCE { -- new name 'PrivateKeyObjectEC' created for PKCS15Object {CommonKeyAttributes, CommonPrivateKeyAttributes, PrivateECKeyAttributes}
    commonObjectAttributes	CommonObjectAttributes,
    commonKeyAttributes		CommonKeyAttributes,
    commonPrivateKeyAttributes 	[0] EXPLICIT CommonPrivateKeyAttributes OPTIONAL,
    privateECKeyAttributes		[1] EXPLICIT PrivateECKeyAttributes
}

PublicKeyObjectEC ::= SEQUENCE { -- new name 'PublicKeyObjectEC' created for PKCS15Object {CommonKeyAttributes, CommonPublicKeyAttributes, PublicECKeyAttributes}
    commonObjectAttributes	CommonObjectAttributes,
    commonKeyAttributes		CommonKeyAttributes,
    commonPublicKeyAttributes 	[0] EXPLICIT CommonPublicKeyAttributes OPTIONAL,
    publicECKeyAttributes		[1] EXPLICIT PublicECKeyAttributes
}

SecretKeyObject ::= SEQUENCE { -- PKCS15Object {CommonKeyAttributes, CommonSecretKeyAttributes, GenericSecretKeyAttributes}
    commonObjectAttributes	CommonObjectAttributes,
    commonKeyAttributes		CommonKeyAttributes,
    commonSecretKeyAttributes 	[0] CommonSecretKeyAttributes OPTIONAL,
    genericSecretKeyAttributes	[1] EXPLICIT GenericSecretKeyAttributes
}

CertificateObjectX509 ::= SEQUENCE { -- PKCS15Object {CommonCertificateAttributes, NULL, CertAttributes}
    commonObjectAttributes			CommonObjectAttributes,
    commonCertificateAttributes		CommonCertificateAttributes,
    x509CertificateAttributes		[1] EXPLICIT X509CertificateAttributes
}

DataObjectOpaque  ::= SEQUENCE {  -- new name 'DataObjectOpaque' created for PKCS15Object {CommonDataObjectAttributes, NULL, DataObjectAttributes}
    commonObjectAttributes			CommonObjectAttributes,
    commonDataObjectAttributes		CommonDataObjectAttributes,
    opaque							[1] EXPLICIT Opaque
}

AuthenticationObjectPin  ::= SEQUENCE {  -- new name 'AuthenticationObjectPin' created for PKCS15Object { CommonAuthenticationObjectAttributes, NULL, PinAttributes}
    commonObjectAttributes					CommonObjectAttributes,
    commonAuthenticationObjectAttributes	CommonAuthenticationObjectAttributes,
    pinAttributes							[1] EXPLICIT PinAttributes
}

AuthenticationObjectBiometric  ::= SEQUENCE {  -- new name 'AuthenticationObjectBiometric' created for PKCS15Object { CommonAuthenticationObjectAttributes, NULL, BiometricAttributes}
    commonObjectAttributes					CommonObjectAttributes,
    commonAuthenticationObjectAttributes	CommonAuthenticationObjectAttributes,
    biometricAttributes						[1] EXPLICIT BiometricAttributes
}



AuthenticationObjectAuthKey  ::= SEQUENCE {  -- new name 'AuthenticationObjectAuthKey' created for PKCS15Object { CommonAuthenticationObjectAttributes, NULL, AuthKeyAttributes}
    commonObjectAttributes					CommonObjectAttributes,
    commonAuthenticationObjectAttributes	CommonAuthenticationObjectAttributes,
    authKeyAttributes						[1] EXPLICIT AuthKeyAttributes
}

AuthenticationObjectExternal  ::= SEQUENCE {  -- new name 'AuthenticationObjectExternal' created for PKCS15Object { CommonAuthenticationObjectAttributes, NULL, ExternalAuthObjectAttributes}
    commonObjectAttributes					CommonObjectAttributes,
    commonAuthenticationObjectAttributes	CommonAuthenticationObjectAttributes,
    externalAuthObjectAttributes			[1] EXPLICIT ExternalAuthObjectAttributes
}

PrivateKeyType ::= CHOICE {
    privateRSAKey	    PrivateKeyObjectRSA, -- {PrivateRSAKeyAttributes}
    privateECKey 	[0] PrivateKeyObjectEC   -- {PrivateECKeyAttributes}
--    privateDHKey 	[1] PrivateKeyObject {PrivateDHKeyAttributes},
--    privateDSAKey	[2] PrivateKeyObject {PrivateDSAKeyAttributes},
--    privateKEAKey	[3] PrivateKeyObject {PrivateKEAKeyAttributes},
--    ...  For future extensions
}

PublicKeyType ::= CHOICE {
    publicRSAKey 	    PublicKeyObjectRSA, -- {PublicRSAKeyAttributes}
    publicECKey 	[0] PublicKeyObjectEC   -- {PublicECKeyAttributes},
--    publicDHKey 	[1] PublicKeyObject {PublicDHKeyAttributes},
--    publicDSAKey 	[2] PublicKeyObject {PublicDSAKeyAttributes},
--    publicKEAKey 	[3] PublicKeyObject {PublicKEAKeyAttributes},
--    ...  For future extensions
}

SecretKeyType ::= CHOICE {
    genericSecretKey	SecretKeyObject, -- {GenericSecretKeyAttributes},
--    rc2key			[0] SecretKeyObject {GenericSecretKeyAttributes},
--    rc4key			[1] SecretKeyObject {GenericSecretKeyAttributes},
    desKey			[2]  SecretKeyObject, -- {GenericSecretKeyAttributes},
    des2Key			[3]  SecretKeyObject, -- {GenericSecretKeyAttributes},
    des3Key			[4]  SecretKeyObject  -- {GenericSecretKeyAttributes},
--    castKey			[5] SecretKeyObject {GenericSecretKeyAttributes},
--    cast3Key		[6] SecretKeyObject {GenericSecretKeyAttributes},
--    cast128Key		[7] SecretKeyObject {GenericSecretKeyAttributes},
--    rc5Key			[8] SecretKeyObject {GenericSecretKeyAttributes},
--    ideaKey			[9] SecretKeyObject {GenericSecretKeyAttributes},
--    skipjackKey		[10] SecretKeyObject {GenericSecretKeyAttributes},
--    batonKey		[11] SecretKeyObject {GenericSecretKeyAttributes},
--    juniperKey		[12] SecretKeyObject {GenericSecretKeyAttributes},
--    rc6Key			[13] SecretKeyObject {GenericSecretKeyAttributes},
--    otherKey		[14] OtherKey,
--    aesKey			[15] SecretKeyObject {GenericSecretKeyAttributes},
--    ...  For future extensions
}

CertificateType ::= CHOICE {
    x509Certificate  	CertificateObjectX509 -- CertificateObject { X509CertificateAttributes},
--    x509AttributeCertificate [0] CertificateObject
--                        {X509AttributeCertificateAttributes},
--    spkiCertificate 	[1] CertificateObject {SPKICertificateAttributes},
--    pgpCertificate  	[2] CertificateObject {PGPCertificateAttributes},
--    wtlsCertificate 	[3] CertificateObject {WTLSCertificateAttributes},
--    x9-68Certificate 	[4] CertificateObject {X9-68CertificateAttributes},
--    ...,
--    cvCertificate	[5] CertificateObject {CVCertificateAttributes}
}

DataType ::= CHOICE {
    opaqueDO		DataObjectOpaque  --{Opaque},
--    externalIDO	[0] DataObject,   {ExternalIDO},
--    oidDO			[1] DataObject,   {OidDO},
--    ...  For future extensions
}

AuthenticationType ::= CHOICE {
    pinAuthObj          AuthenticationObjectPin,      -- pin AuthenticationObject { PinAttributes },
--    ...,
    biometricAuthObj    [0] AuthenticationObjectBiometric, -- AuthenticationObject {BiometricAttributes},
    authKeyAuthObj      [1] AuthenticationObjectAuthKey -- {AuthKeyAttributes},
--    externalAuthObj     [2] EXPLICIT AuthenticationObjectExternal {ExternalAuthObjectAttributes}
}

PKCS15Objects ::= CHOICE {
    privateKeys 		[0] EXPLICIT PrivateKeys,
    publicKeys 			[1] EXPLICIT PublicKeys,
    trustedPublicKeys  	[2] EXPLICIT PublicKeys,
    secretKeys 			[3] EXPLICIT SecretKeys,
    certificates		[4] EXPLICIT Certificates,
    trustedCertificates [5] EXPLICIT Certificates,
    usefulCertificates 	[6] EXPLICIT Certificates,
    dataObjects 		[7] EXPLICIT DataObjects,
    authObjects 		[8] EXPLICIT AuthObjects
--    ...  For future extensions
}

PrivateKeys  ::= PathOrObjects -- {PrivateKeyType}

SecretKeys   ::= PathOrObjects -- {SecretKeyType}

PublicKeys   ::= PathOrObjects -- {PublicKeyType}

Certificates ::= PathOrObjects -- {CertificateType}

DataObjects  ::= PathOrObjects -- {DataType}

AuthObjects  ::= PathOrObjects -- {AuthenticationType}



TokenInfo ::= SEQUENCE {
    version		INTEGER { v1(0), v2(1) }, -- (v1,...),
    serialNumber	OCTET STRING,
    manufacturerID 	Label OPTIONAL,
    label 		[0] Label OPTIONAL,
    tokenflags 		TokenFlags,
    seInfo 		SEQUENCE OF SecurityEnvironmentInfo OPTIONAL,
--    recordInfo 		[1] RecordInfo OPTIONAL,      PKCS#15 ODF files are expected to be transparent files
    supportedAlgorithms	[2] SEQUENCE OF AlgorithmInfo OPTIONAL,
--    ...,
    issuerId		[3] Label OPTIONAL,
    holderId		[4] Label OPTIONAL,
    lastUpdate		[5] EXPLICIT LastUpdate OPTIONAL,
    preferredLanguage	PrintableString OPTIONAL, -- In accordance with IETF RFC 1766
    profileIndication   [6] SEQUENCE OF ProfileIndication OPTIONAL
} -- (CONSTRAINED BY {  Each AlgorithmInfo.reference value must be unique })

TokenFlags ::= BIT STRING {
    readonly		(0),
    loginRequired 	(1),
    prnGeneration 	(2),
    eidCompliant  	(3)
}

SecurityEnvironmentInfo ::= SEQUENCE {
    se		INTEGER (0..pkcs15-ub-seInfo),
    owner 	OBJECT IDENTIFIER
--    ...  For future extensions
}

RecordInfo ::= SEQUENCE {
    oDFRecordLength  	[0] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    prKDFRecordLength 	[1] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    puKDFRecordLength	[2] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    sKDFRecordLength 	[3] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    cDFRecordLength  	[4] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    dODFRecordLength 	[5] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL,
    aODFRecordLength 	[6] INTEGER (0..pkcs15-ub-recordLength) OPTIONAL
}

AlgorithmInfo ::= SEQUENCE {
    reference  	Reference,
    algorithm  	INTEGER, -- PKCS15-ALGORITHM.&id({AlgorithmSet}),
    parameters 	ANY DEFINED BY algorithm,         -- PKCS15-ALGORITHM.&Parameters({AlgorithmSet}{@algorithm}),
    supportedOperations Operations,               -- PKCS15-ALGORITHM.&Operations({AlgorithmSet}{@algorithm}),
    algId       OBJECT IDENTIFIER OPTIONAL, -- PKCS15-ALGORITHM.&objectIdentifier({AlgorithmSet}{@algorithm}) OPTIONAL,
    algRef      Reference OPTIONAL
}

--PKCS15-ALGORITHM ::= CLASS {
--        &id INTEGER UNIQUE,
--        &Parameters,
--        &Operations Operations,
--	&objectIdentifier OBJECT IDENTIFIER OPTIONAL
--} WITH SYNTAX {
--  PARAMETERS &Parameters OPERATIONS &Operations ID &id [OID &objectIdentifier]}

--PKCS15-OPAQUE ::= TYPE-IDENTIFIER

PublicKeyOperations ::= Operations

Operations ::= BIT STRING {
        compute-checksum  (0), -- H/W computation of checksum
        compute-signature (1), -- H/W computation of signature
        verify-checksum   (2), -- H/W verification of checksum
        verify-signature  (3), -- H/W verification of signature
        encipher          (4), -- H/W encryption of data
        decipher          (5), -- H/W decryption of data
        hash              (6), -- H/W hashing
        generate-key      (7)  -- H/W key generation
}

--pkcs15-alg-null      PKCS15-ALGORITHM ::= {
--        PARAMETERS NULL OPERATIONS {{generate-key}} ID -1}

--AlgorithmSet PKCS15-ALGORITHM ::= {
--        pkcs15-alg-null,
--        ...  See PKCS #11 for values for the &id field (and parameters)
--        }

LastUpdate ::= CHOICE {
        generalizedTime GeneralizedTime,
        referencedTime ReferencedValue -- {GeneralizedTime},
--    ...  For future extensions
}

ProfileIndication ::= CHOICE {
        profileOID		OBJECT IDENTIFIER,
        profileName		UTF8String
--    ...  For future extensions
}


-- Misc

DDO ::= SEQUENCE {
    oid  	  OBJECT IDENTIFIER,
    odfPath  	  Path OPTIONAL,
    tokenInfoPath [0] Path OPTIONAL,
    unusedPath 	  [1] Path OPTIONAL
--    ...  For future extensions
}

DIRRecord ::=   [APPLICATION 1] SEQUENCE {
    aid  	[APPLICATION 15] OCTET STRING,
    label 	[APPLICATION 16] UTF8String OPTIONAL,
    path 	[APPLICATION 17] OCTET STRING,
    ddo  	[APPLICATION 19] DDO OPTIONAL
}


-- --------------------------------------------------------
-- certificate and CRL specific structures begin here
-- --------------------------------------------------------

Certificate  ::=  SEQUENCE  {
     tbsCertificate       TBSCertificate,
     signatureAlgorithm   AlgorithmIdentifier,
     signature            BIT STRING  }

TBSCertificate  ::=  SEQUENCE  {
     version         [0]  EXPLICIT Version DEFAULT v1,
     serialNumber         CertificateSerialNumber,
     signature            AlgorithmIdentifier,
     issuer               Name,
     validity             Validity,
     subject              Name,
     subjectPublicKeyInfo SubjectPublicKeyInfo,
     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- If present, version shall be v2 or v3
     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- If present, version shall be v2 or v3
     extensions      [3]  EXPLICIT Extensions OPTIONAL
                          -- If present, version shall be v3 --
}

Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }

CertificateSerialNumber  ::=  INTEGER

Validity ::= SEQUENCE {
     notBefore      Time,
     notAfter       Time }

Time ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }

UniqueIdentifier  ::=  BIT STRING

SubjectPublicKeyInfo  ::=  SEQUENCE  {
     algorithm            AlgorithmIdentifier,
     subjectPublicKey     BIT STRING  }

Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

Extension  ::=  SEQUENCE  {
     extnID      OBJECT IDENTIFIER,
     critical    BOOLEAN DEFAULT FALSE,
     extnValue   OCTET STRING
}

 -- artificially for libtasn1, just to have a value of type ...
CertificateChoice ::= CHOICE {
    certificate	 Certificate
}

DIRRecordChoice ::= CHOICE {
    dirRecord	 DIRRecord
}

--odfRecord  PKCS15Objects

TokenInfoChoice ::= CHOICE {
    tokenInfo	 TokenInfo
}

PKCS15ObjectsChoice ::= CHOICE {
    pkcs15Objects	 PKCS15Objects
}

SecretKeyTypeChoice ::= CHOICE {
    secretKey	 SecretKeyType
}

AuthenticationTypeChoice ::= CHOICE {
    authObj	 AuthenticationType
}

END
