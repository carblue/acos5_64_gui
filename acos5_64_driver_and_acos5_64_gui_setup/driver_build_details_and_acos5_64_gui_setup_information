file: driver_build_details_and_acos5_64_gui_setup_information

driver libacos5_64.so
=====================

The driver is suitable for ACS ACOS5-64, hardware version V2 (Smart Card/CryptoMate64) and V3 (Smart Card/CryptoMate Nano),
32K mode is not supported.
The support for FIPS mode (V3) gets improved currently, while I didnt't succeed to setup a card in FIPS mode, that responses with
FIPS compliance==okay. I stil get an undocumented (in ref. manual) error code 6F59; perhaps someone is willing to help here?

The driver is not complete in the context of card initialization. Those commands will follow in parallel to ongoing development
of acos5_gui.


The driver-package(s) available here were built on an Ubuntu Bionic Beaver system (18.04), i.e. they have dependencies typical for
that distro, notably openssl 1.1.0:

acos5-64-bionic_amd64-dmd_2_81_0-opensc_0_17.deb
acos5-64-bionic_amd64-ldc_2_80_1-opensc_0_17.deb
acos5-64-bionic_amd64-gdc_2_76_0-opensc_0_17.deb


3 D-Compiler suites are supported currently, DMD 2.081.0 and LDC 1.10.0 (which corresponds to 2.080.1); the driver depends on
  shared phobos and druntime. Debian packaged LDC (1.8.0) lacks a required phobos function, introduced since LDC-1.9.0.
  Whatever libacos5_64.so You use, it was compiled WITHOUT rpath, thus expecting to find shared phobos and druntime in standard
  library search path. libphobos2-ldc-shared80_1.10.0-1_amd64.deb is a repackaging of ldc2-1.10.0-linux-x86_64.tar.xz installing
  the shared phobos and druntime that way, providing what acos5-64-bionic_amd64-ldc_2_80_1-opensc_0_17.deb depends on (referring
  to the compiler).
1 OpenSC version is supported currently, 0.17.0  (the driver depends on shared libopensc.so.5).

More packages will follow, once packaging opensc_0_18 was done.

While the libacos5_64.so included in .deb is meant to be used on any Linux 64 bit system, packaging it as .deb is an easy 1-click
install for Debian/Ubuntu users and just an easy way for me to convey several infos in a compact way:
1. Where the libacos5_64.so has to be placed in the system: Basically the only requirement is that it is placed within a standard
   library search path for .so in a x86_64 system. The opensc.conf and acos5_64_gui will rely on the library being found without
   providing a path !
2. Where to place opensc.conf and it's content, suitable for acos5_64
3. Where to place acos5_64.profile and it's content, suitable for acos5_64
4. The target architecture, dependency on other software and more is easily expressible, as shown in the control file
5. Access rigths of libacos5_64.so.0.0.1 don't need to be root, thus if that's the case after installing from .deb,
   do run chown on it for security reasons.

For Debian-based systems, one of the .deb is all You need referring to the driver (apart from "keyset" explained in the end).
They assume http://d-apt.sourceforge.net/ or libphobos2-ldc-shared80_1.10.0-1_amd64.deb to be the source for DMD's or LDC's shared
phobos and druntime.
opensc_0_17 is available from Debian for Ubuntu Bionic (effectively 2 pack., opensc and opensc-pkcs11 make up a release version).
opensc_0_18 will soon be available from https://github.com/carblue/opensc, packaged from compiled sources, also split into 2 .deb
like in the 0.17 version)

The driver packages replace /etc/opensc/opensc.conf with a file suitable for acos5_64.
BE AWARE, that this new opensc.conf switches on logging, and does switch off all internal drivers except acos5_64 for reasons
mentioned in opensc.conf.
YOU MAY WANT to change opensc.conf to Your needs, at least switching off logging again if everything works as expected. In the
beginning, it's recommended to have the logging feature enabled for troubleshooting.
The log file will reveal pins entered for hardware version ACOS5 V2.0 (CryptoMate64) which lacks SM for pins. Secure Messaging for
pins is possible since hardware version ACOS5-64 V3.0 (CryptoMate Nano) but only effective if configured for instruction 0x20 that
way via SAE, or if in FIPS mode.
The original opensc.conf from OpenSC, generated on Ubuntu Bionic Beaver from configure invocation
$ ./configure --prefix=/usr --sysconfdir=/etc/opensc --libdir=/usr/lib/x86_64-linux-gnu
is there as file opensc.conf.orig17 or opensc.conf.orig18


For other Linux distros, these commands will extract relevant .deb contents to tmp/,
e.g. of acos5-64-bionic_amd64-dmd_2_80_0-opensc_0_17.deb
$ mkdir tmp && cd tmp
$ ar p ../acos5-64-bionic_amd64-dmd_2_80_0-opensc_0_17.deb control.tar.xz | tar -xJ
$ ar p ../acos5-64-bionic_amd64-dmd_2_80_0-opensc_0_17.deb data.tar.xz | tar -xJ

In this case, overwrite /etc/opensc/opensc.conf only if the existing (original) /etc/opensc/opensc.conf and the file
opensc.conf.orig17 match exactly, otherwise perform the required changes manually or even better use diff and patch.


Key sizes for Secure Messaging (3DES) will be 24 byte=192 bit, thus from opensc.conf the
keyset_..._02_enc  and keyset_..._02_mac with 24 byte keys will be used for non-FIPS, and
keyset_..._01_enc  and keyset_..._01_mac with 24 byte keys will be used for FIPS mode.


$ ldd libacos5_64.so  (from acos5-64-bionic_amd64-dmd_2_81_0-opensc_0_17.deb)
        linux-vdso.so.1 (0x00007ffdfe76d000)
        libcrypto.so.1.1 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f1d5ee16000)
        libopensc.so.5 => /usr/lib/x86_64-linux-gnu/libopensc.so.5 (0x00007f1d5ea4b000)
        libphobos2.so.0.81 => /usr/lib/x86_64-linux-gnu/libphobos2.so.0.81 (0x00007f1d5e27f000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f1d5e067000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1d5dc76000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f1d5f4d7000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1d5da72000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1d5d853000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f1d5d636000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f1d5d298000)
        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f1d5d090000)


$ ldd libacos5_64.so  (from acos5-64-bionic_amd64-ldc_2_80_1-opensc_0_17.deb)
        linux-vdso.so.1 (0x00007ffd2bb18000)
        libcrypto.so.1.1 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f2fa1aef000)
        libopensc.so.5 => /usr/lib/x86_64-linux-gnu/libopensc.so.5 (0x00007f2fa1724000)
        libphobos2-ldc-shared.so.80 => /usr/lib/x86_64-linux-gnu/libphobos2-ldc-shared.so.80 (0x00007f2fa12a8000)
        libdruntime-ldc-shared.so.80 => /usr/lib/x86_64-linux-gnu/libdruntime-ldc-shared.so.80 (0x00007f2fa2274000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2fa1089000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f2fa0e71000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fa0a80000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f2fa2190000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2fa087c000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f2fa065f000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fa02c1000)
        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f2fa00b9000)

-------------------------------------------------------------------------------------------------------------



setup information for acos5_gui
===============================

Basic requirements are the DUB package manager and the DMD or LDC D compiler from  https://dlang.org/download.html
or http://d-apt.sourceforge.net/ or see above the ldc package

IUP
===
Soon a Debian package will be available from https://github.com/carblue/iup, a (re_)packaging of iup-3.25

Alternatively:
Starting point for the binary downloads is e.g.  http://webserver2.tecgraf.puc-rio.br/iup/en/download.html or
http://webserver2.tecgraf.puc-rio.br/iup/en/download_tips.html
This will point to some  sourceforge.net site. The kernel-matching-one of iup-???_64_lib.tar.gz in folder
Linux Libraries is what You want (for Bionic Beaver kernel 4.15, the files for kernel 4.4 do work as well).
There is a suitable script file 'install' inside.
The installation of IUP and CD is required, IM is optional.
The precompiled binaries downloaded/installed depend on a bunch of other installations
(assumed regularly available on Your system already; requirements as in IUP/CD documentaion).
Those prerequisites are mentioned e.g. for IUP at  http://webserver2.tecgraf.puc-rio.br/iup/en/guide.html#start

In order to test, whether all dependencies of IUP and CD are in place, fetch my iup D binding manually:
dub fetch iup

cd into the downloaded package directory where the folder 'examples' resides and run:
cd examples/C && chmod +x tree.d && ./tree.d

If that doesn't launch a window showing a simple tree structure, then something is missing in IUP/CD installation.
The dynamic layout of graph. elements like text box size depends on the GTK-Font size (the GUI design was based on Noto Sans 10).
Don't select greater fonts, otherwise the application window migth exceed the screen size.

OpenSC
======
It's recommended to read at least the README.md of dependency package/D-binding 'opensc' because of the tight dependency
on the specific opensc binary on Your system that will be used (by driver and acos5_64_gui) !!
Required is one of
libopensc.so.5 in opensc version 0.17.0
libopensc.so.6 in opensc version 0.18.0

Depending on the binary opensc version used,
change dub.json to "libs-posix": [":libopensc.so.5"] or "libs-posix": [":libopensc.so.6"]

Also https://github.com/carblue/opensc/blob/master/info/options is a recommended read !

IT'S ABSOLUTELY REQUIRED, THAT THE D BINDING (opensc package's version identifiers) MATCHES EXACTLY HOW THE libopensc.so
BINARY WAS BUILT !!!

opensc is available in many distributions, though maybe not versions 0.17.0 or 0.18.0
If You need to build that, it's easy following https://github.com/OpenSC/OpenSC/wiki/Compiling-and-Installing-on-Unix-flavors.
Do what's described as 'Typical Installation' but optionally/recommended replace the install step by: sudo checkinstall
Debian packaging differs by applying $ ./configure --prefix=/usr --sysconfdir=/etc/opensc --libdir=/usr/lib/x86_64-linux-gnu
and also Debian packaging cares for p11-kit configuration files for OpenSC's PKCS#11 module, such that it's ready to be used once
p11-kit is installed. The 'Typical Installation' described doesn't care for p11-kit configuration files.

Requirements are a libopensc.so.? and opensc-pkcs11.so installed/available afterwards !
I assume, You now have an opensc version 0.18.0 binary installation (otherwise a 0.17.0 binary, which requires ommitting
OPENSC_VERSION_LATEST from the bindings dub.json). Following the 'Typical Installation' will #define
ENABLE_SM, ENABLE_OPENSSL  and NOT #define SIMCLIST_WITH_THREADS, SIMCLIST_DUMPRESTORE in the binary build.

The driver/SM libacos5_64.so binaries available here depend on a specific version of opensc && compiler/phobos && openssl 1.1.0 !

(Update: The patch method was replaced by providing the changed opensc.conf ! The problem with patching is, that there is no one
single opensc.conf. configure will modify a template of opensc.conf depending on the kind of system, invokation parameters).
Apply the accompanied etc_opensc_opensc_conf.patch on the original (what get's initially installed by OpenSC) opensc.conf
for Linux as of the respective version,
assumingly located in /etc/opensc/opensc.conf, by:
patch -b /etc/opensc/opensc.conf etc_opensc_opensc_conf.patch

That does the essential configuration, such that the driver 'acos5_64' implemented by libacos5_64.so will be loaded as an external
driver and an external SM module (same binary used for driver and SecureMessaging module).
The problem with the false positive recognition of ATR of Card/CryptoMate64 in acos5 internal driver is dealt with by excluding
all internal drivers except acos5_64, default (change to card_drivers = acos5_64, internal;   for ACOS5-64 V3):
There may be better ways to workaround that problem.

Review the settings done by etc_opensc_opensc_conf.patch, escpecially 3 points require special attention, partially manual editing:
1. Where the binary libacos5_64.so is located: The easiest (least to specify) way, is to place it in a directory
   that is part of the system's library search path, e.g. /usr/local/lib/libacos5_64.so
   Don't forget a  sudo ldconfig  then. (Update: System's library search path is the default now in .deb packages provided !)

2. If You want/Your card/token uses Secure Messaging (in FIPS mode, SM definitely is used !), then 2 correct keyset_* must exist:
   keyset_..._02_enc (which corresponds to record #2 with key reference 0x82 on card) and keyset_..._02_mac  (which corresponds to
   record #1 with key reference 0x81 on card), all are 24 byte keys according to SESSIONKEYSIZE24 set.
   TODO expalin: For FIPS mode, the above is different, keyset_..._01* will be used (as security officer key and encryption key),
   no session keys used  etc.

   keyset* and corresponding keys on card must be the same, i.e. You are using 2 recommendedly different, 24 byte keys, that both
   opensc.conf and the card know about:
   These keys are used, one for Internal Authentication, the other for External Authentication, which are initial steps in
   establishing a 'secure channel' for Secure Messaging.
   OpenSC software (namely the acos5_64 SM module) will evaluate the entries for keyset in opensc.conf and check them for equality
   against the keys on card.
   Upon successful Int. and Ext. Authentication, 2 SessionKeys and an InitialVector (SendSequenceCounter) for 3DES will be derived
   (as explained in the ACOS5-64 Reference Manual available from ACS). One SessionKey is for encryption/decryption, the other for
   MAC-generation, both applicable as short-lifetime keys only within Secure Messaging.
   TODO expalin: For FIPS mode, the above is different

   In total there are 3 options:
   (a) no Secure Messaging takes place,
   (b) SM-sign: Secure Messaging for Authenticity, MAC-generation and check only, no encrypted command (payload) data /
                decrypted response data
   (c) SM-enc:  Secure Messaging for Authenticity and Confidentiality, MAC-generation and check as well as encryption/decryption
                of command (payload) data / response data
   TODO expalin: For FIPS mode, the above is different: There is no (b) option

   Not all commands need/support SM and the support also depends on the hardware (V2 / V3 (Nano)). Whether and which kind of SM
   applies, depends on the SCB SecurityConditionByte (which may point to some SecurityEnvironmentFile record).
   Contents of referred SecurityEnvironmentFile record distinguish SM options (b) or (c).
   The SCB is fixed either during file creation for Security Attributes Compact (SAC) or during directory creation for SAC and/or
   Security Attributes Expanded.
   The opensc.conf file configuration for acos5_64 has a line
   mode = acl;
   If exactly acl is defined as mode (it means something like access control decides about SM), then the driver acos5_64 will
   evaluate the SCB setting for possible SM related bits and - if requested - automatically turn on the appropriate Secure
   Messaging option and establish a 'secure channel' for Secure Messaging for one command and the possible response only,
   afterwards closes the 'secure channel' for Secure Messaging, i.e. 'forgets' the waste 2 SessionKeys, zeroizes the
   InitialVector (SendSequenceCounter), removes any Control Reference Templates accumulated in internal memory and revokes the
   'state authenticated' of KeyTerminal = symetric key reference 0x81.

   Setting up for Secure Messaging is not simple but it's worth the hassle for increased security. Here is an example:
   Suppose I want to read a file's content with SM-enc and let ?? denote a hex byte setting that's not relevant in this context:
   Suppose, the file (to read) path is: 3F00 4100 3901
   Suppose, the sym. key file path is:  3F00 4100 4102
   Suppose, the sec. env. file path is: 3F00 4100 4103
   Suppose, the directory 4100 is currently selected

   The file 3901 was created with these settings:
   SAC tag 0x8C, len bytes following: 0x08, AM: 0x7F and 7 SCB values: 8C 08 7F ?? ?? ?? ?? ?? ?? 46
   0x46 specifies the access condition for 'Read Operation' and: Force the use of Secure Messaging and at least one condition
   specified in the SE-ID #6

   I always have record # be the same as the ID # stored in it to reduce confusion, thus I have the SE-ID #6 in record-no 6
   (counting beginning from 1). The security environment file 4103  has this content in record #6 (spaces for readability):
   80 01 06   B4 08 84 00 95 01 30 80 01 02   B8 08 84 00 95 01 30 80 01 02   A4 06 83 01 81 95 01 80

   The content includes as SE-ID #6 : A Cryptographic Checksum Template, a Confidentiality Template and an Authentication Template
   (For SM-sign, the Confidentiality Template must be omitted).
   The Auth. Templ. specifies: Use the Sym. key file under the currently selected DF i.e. 4102 and authenticate the key #1 therein
   (I also refer to that as key reference 0x81; that's the byte actually stored, including the 'local' (opposed to global) info).
   The other templates specify: Use the SessionKey and do use for Secure Messaging and use algorithm Triple DES in Cipher Block
   Chaining mode of operation; SessionKey implies, that the SendSequenceCounter will be used as IV (ACS ref. man. calls that
   'sequence number' seq#).

   The 'trick' is to use SM without any pin verify requirement, as key reference 0x81 will be authenticated anyway during the
   External Authentication step of establishing Secure Messaging. This is how the driver works (and what it expects for SM !).

   Why all this lengthy explanation about SM? It should be clear now, that the driver and acos5_64_gui (in it's current state)
   don't shield the user from every complex aspect of SM. Lastly the user, You decide about relevant aspects by deciding about the
   SecurityConditionByte s during file/directory creation.
   What acos5_64_gui currently does, is showing Header/meta infos (FCI) for file and it's directory, which exposes all relevant
   SCB s and SAE content.

   Put Key operations aren't yet provided by acos5_64_gui, but nevertheless, You have to lookup the "Symmetric Key Record Format"
   in the ACOS5-64 reference manual anyway: There are decisions to make about Retry(Error) / Usage Counter as well.
Here are example commands (within the quotes) to use (e.g. from gscriptor, but better eliminate spaces used here for readability):
hexString!"00 A4 00 00 02  4100"         <= command 00A40000024100  will select file id 0x4100, app dir in this case
hexString!"00 A4 00 00 02  4102"         <= command 00A40000024102  will select file id 0x4102, the symetric key file
The next 2 commands: Each writes a 24 byte key (the bytes between 14 and the trailing 00's to record 1 or 2 of selected file 4102,
together with the algorithm to be used with that key (3DES ede), the key reference 0x81 or 0x82, if it's a key for External Auth.
or Internal Auth., which Retry(Error) Counter or Usage Counter do apply
hexString!"00 DC 01 04 25  81 01 FF   14 F1E0D0C1B0A18908 07164504130201F1 89FEB3C837451694 000000000000000000" // KeyTerminal; no Retry(Error) Counter for key ! External Auth.
hexString!"00 DC 02 04 25  82 02 FFFF 14 F101021304851607 0849A1B0C1D0E0F1 4589B316FE9437C8 0000000000000000"   // KeyCard;     no        Usage Counter for key ! Internal Auth.
hexString!"00 44 00 00 02  4102"         <= without activation, the symetric key file is unusable !

   In order to be safe, care for odd parity bytes of the 24 byte keys, thus e.g. hex 03 with 2 bits set is not a valid byte within
   a key.  I don't remember the circumstances, but I remember, the 'odd parity thing' once fell on my feet, probably it was openssl
   rejecting a key because of that contempt.

   Update to opensc.conf comment:
     # the key naming_41434F53504B43532D313576312E3030 (decoded to ASCII, len=len_max=16: ACOSPKCS-15v1.00)
     # may have to be changed according to card/token application DF's file name.

   That is not correct: It should read:
        # may have to be changed according to card/token applicationID aid value, that is specified in file 0x2f00.
        # For my card, the relevant part ASN.1-decoded is:   name: aid  type: OCT_STR  value: 41434f53504b43532d313576312e3030


(Update: This feature/user_consent is switched off currently, it doesn't work any more:)
3. The driver is compiled with ENABLE_ACOS5_64_UI set, which means, the driver basically is prepared to launch a pinentry program
   and respect Your decision taken (it's still experimental, not always working properly (depending on pinentry-qt-version?)
   ssh -T git@github.com  returns this error  pinentry-qt: Assuan processing failed: Datenübergabe unterbrochen (broken pipe)):

   The launch will take place when a RSA private key shall be used for operation 'Sign' or 'Decrypt'. There is actually no pin asked
   for here; it's all about Your consent to use the private key now or reject that.
   popup_user_consent_app =;  must be edited to actually enable that feature, and of course that program must be callable;
